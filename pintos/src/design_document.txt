			+---------------------------+
			|	    CS 330	    |
			| PROJECT 3: VIRTUAL MEMORY |
			|       DESIGN DOCUMENT	    |
			+---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mingi Shin <yuagnun@gmail.com>
Chang Yoon Lee <cyoon47@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Team 1, project 3, tokens

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

From /threads/thread.h

struct thread
{
  ...
  /* Supplemental Page Table */
  struct hash s_page_table;
  void *esp;

  struct list mmap_list;
  int next_mapid;
};

struct hash s_page_table
: supplemental page table which holds additional information of pages for loading.
We used a provided hash data structure.



From /vm/frame.h

struct list frame_table;
: list of frames.

struct lock frame_lock;
: mutual exclusive lock to avoid racing condition when referring and manipulating
the frame table.

struct frame_entry{
  void *frame;
  struct list_elem elem;
  struct thread *owner_thread;
  struct s_page_entry *loaded_page;
};

void *frame;
: the physical address of the frame.

struct list_elem elem;
: list_elem to insert the frame_entry into frame_table.

struct thread *owner_thread;
: the thread that owns the page loaded in the frame.

struct s_page_entry *loaded_page;
: the corresponding s_page_entry of the page loaded in the frame.

From /vm/page.h

enum page_type
{
  TYPE_FILE,
  TYPE_SWAP,
  TYPE_STACK,
  TYPE_MMAP
};

enum page_type allows distinction between different types of pages.

struct s_page_entry{
  enum page_type type; 	// type of page
  bool loaded;		// whether the page is loaded in physical memory
  struct file *file;

  int32_t ofs;
  void *upage;
  uint32_t read_bytes;
  uint32_t zero_bytes;
  bool writable;
  bool allow_swap;

  disk_sector_t swap_sec_no;

  struct hash_elem elem;
};

enum page_type type;
: the type of the page defined in enum page_type.

bool loaded;
: indicates whether the page is loaded in physical memory.

struct file *file;
: the file that the page should be loaded from for initial executable loading and mmap pages.

int32_t ofs;
: offset in the file that the page should be loaded from.

void *upage;
: the user virtual address for the page.

uint32_t read_bytes;
: the number bytes to be read from the file.

uint32_t zero_bytes;
: the number of zero bytes to be appended at the end of the page.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Given a page, we can look up the supplemental page entry using the page_lookup() function, which rounds down the given user virtual address to a multiple of PGSIZE, and finds the s_page_entry in the supplemental page table hash. 

Once we found the s_page_entry, we can check the boolean loaded to check if the page is loaded in physical memory. 
If loaded is false, there is no frame that contains the data of the page. 
If loaded is true, we can retrieve the frame using the pagedir_get_page() function using the thread’s page directory and the page’s user virtual address as the arguments.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Firstly, there should be no case of two or more pages pointing to the same frame, since we did not implement sharing of frames. If two pages refer to the same part of a file, then there will be two separate frames loaded.

The second case is about aliasing between the user virtual page and kernel virtual page. In our code, all accesses to the user data is done through the user virtual address. Even in kernel, during system calls or exceptions, the kernel uses the user virtual address to locate the supplemental pages to load the required data. Therefore, kernel virtual addresses are never used to access user data, and the aliasing issue should be solved.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We made use of frame_lock to control access to the frame table.

Firstly, the two processes will call palloc_get_page() to be allocated a physical address. This function avoids race by using pool lock to control access to the bitmap containing the physical addresses.

If palloc_get_page() is successful, the process will call add_frame() to add the allocated frame to the frame table, and if palloc_get_page() is unsuccessful, the process will call evict_frame to evict a frame from the frame table and add call add_frame() afterwards.

No matter which function each process calls, the two functions control access to the frame table using the frame_lock, so no two processes can access the frame table at the same time. Thus, race conditions are avoided by ensuring mutual exclusion when modifying the frame table.


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We used hash for storing the user pages in each process. This choice was made because the user addresses are expected to be sparse, thus using array would take up too much memory to be efficient. Using hash was a reasonable choice that uses little memory and takes short time to look up the pages.
Frames were stored in a list, as it is simple to implement, and also does not take up too much memory. 

To implement virtual-to-physical mappings, we included all information needed to load a page from the file in supplemental page entry, s_page_entry. This allows us to locate and load the data into the physical memory, as this project implements lazy loading and memory mapping. We also included bool loaded and allow_swap in s_page_entry. The boolean loaded allows us to easily check if the page is loaded in the physical memory for easy deallocation when the process exits. Allow_swap is used to prevent swapping out of the frame when the kernel is working on the frame, such as when writing the contents of the frame to file, or loading the data to the frame.

In frame_entry, we included the owner_thread and loaded_page. Owner thread allows us to locate the process that has its page loaded in the frame, which is used to access the page directory and clear the page when a frame is evicted from the physical memory. loaded_page is used to set the boolean loaded and to check if allow_swap is true during eviction.

Using these data structures, full information synchronization between the virtual and physical memory should be possible.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

From /threads/thread.h

struct thread
{
  ...
  /* Supplemental Page Table */
  struct hash s_page_table;
  void *esp;

  struct list mmap_list;
  int next_mapid;
};

void *esp
: esp is saved to struct thread when exception occurs, to allow the kernel to access the stack pointer when exception occurs in kernel.

From /vm/swap.h

struct lock swap_lock;
: it is used to ensure mutual exclusion when accessing the swap table.

struct disk *swap_disk;
: the swap disk, at hd1:1.

struct bitmap *swap_table;
: a bitmap to keep track of loaded pages in swap disk.




---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We chose second-chance algorithm for choosing a frame to evict.
Choosing that, we could utilize provided accessed bit and associated
features, and easily implement fast and efficient algorithm.

If there is no free frame, palloc_get_page() fails and evict_frame()
is called.
evict_frame() iterates on all swappable frame entries of frame_table,
checking if the accessed bit of the frame is 1 using pagedir_is_accessed().
If the frame is accessed, set its accessed bit to 0 and move on to the
next frame.
If the frame is not accessed, that frame is chosen to be evicted.
Before evicting, check if frame needs to be swapped out or written to
the file system. If dirty bit of the frame is set to 1 or the frame is
one has been swapped in, we use swap_out() in swap.c to swap out the
frame. (After memory mapped file is implemented, if the frame contains
memory-mapped file, it will be written to the corresponding file.)
After that, the boolean loaded of the supplemental page to false, and
the entry is removed from the frame table. Page is removed from the
pagedir of owner thread, memory frame is freed, and free the memory
containing struct frame_entry.
Finally, attempt to get page using palloc_get_page() and return the
obtained page address.
We made this process repeats if final palloc_get_page() gives NULL,
to assure the thread occurred page_fault can obtain the page and
keep running on our OS properly.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

First, in evict_frame, we check whether the page held by Q has been modified, by calling pagedir_is_dirty(). If it has been modified, we store the change by writing to the relevant file if the page was a mmap page, or writing to the swap disk if the page type is something else. This ensures that the change is kept when the page is loaded back in later by Q.

Then, we set boolean loaded in the s_page_entry to false, indicating that the page is no longer loaded. We remove the frame entry that held Q’s page from the frame table, and clears the corresponding page directory for Q using pagedir_clear_page() to ensure that later accesses to the page page faults. We also deallocate the physical address by calling palloc_free_page(). Finally, the previously malloced frame entry is freed.

After we ensure that Q cannot access the frame by deallocating the user virtual address and physical address, we allocate a new frame to P, initializing and allocating all the necessary data for the frame.


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We check if the faulting address is within 32 bytes below the stack pointer. If it is within 32 bytes, we assume that it is a stack access and grow the stack, if the stack size does not exceed STACK_LIMIT, which is 8MB. This heuristic was chosen because PUSHA instruction accesses 32 bytes below the stack pointer, which should be a valid stack access. Since stack accesses then to be sequential, accesses below 32 bytes of esp were considered to be invalid memory accesses.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We used two additional locks for this project, namely frame_lock and swap_lock, that controls access to system-wide frame table and swap table/disk.

The basic principle is that whenever processes attempt to modify the system-wide data structures, for example the frame table, we made sure that the process acquires the corresponding lock before changes are made to the shared resources. This way, synchronization among the processes while accessing the frames and swap space can be ensured.

To avoid deadlocks, we made sure that processes only acquire locks when they need them, and also no interleaving acquiring of two different locks are possible. For example, whenever possible, we did not put any lock_acquire within another lock_acquire, which can cause deadlocks. The only case when a process can acquire both the frame_lock and swap_lock is within evict_frame() in frame.c, where it acquires the frame_lock and then acquires swap_lock when call to swap_out() is made. However, no deadlock is possible, since the swap_lock is accessed only via calls to swap_in() and swap_out(). For deadlock to occur, there must be an attempt to acquire frame_lock in either swap_in() or swap_out(), but this never happens.

Also, when accessing the file system, we used file_lock. However, we ensured that file_lock is acquired just before the file system access and released right after access is finished, so deadlocks will not occur.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Upon selecting Q’s frame to be evicted, pagedir_clear_page() is called on the page. This will cause page faults when Q tries to access the same page, thus preventing access or modification to the page. When page fault occurs as Q tries to access the page, the page should be loaded to physical memory again before Q can access the page again. Therefore, Q cannot access or modify the page during the eviction process.

Faulting the page back in can only be done after the frame is fully evicted, as loading needs to acquire frame_lock, which is held by P until the eviction is finished. Also, while Q’s page is being faulted in, allow_swap for the page should be set to false, thus P can only evict the page after faulting in finishes. This should avoid any race condition between eviction and loading of the same page.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Whenever a page is loaded from the file system or swap, allow_swap in page’s supplemental page entry is set to false. In evict_frame, the code checks at first whether the page’s allow_swap is set to true before trying to evict that page. If the page is still being loaded, allow_swap should be set to false, and that page should not be a candidate for eviction.

Once the page finishes being read in, allow_swap is set to true, allowing the page to be evicted again.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

When access to paged-out page occurs during system calls, page fault should occur and the paged-out page is loaded back to memory.

If an invalid virtual address is given, the page fault handler will not be able to find any supplemental page entry corresponding to the faulting address, and will kill the process with exit status of -1.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We used a two locks to control accesses to the frame table and swap table. This will allow some kind of parallelism to the VM system, there is a lock each to control access to each system-wide shared data structures, so they will not affect each other’s performance. Also, by keeping the number of locks small, it is easier to keep track of locking to avoid any deadlocks. Using small number of locks also makes the code easier to understand, without the trouble of making sense of highly interleaved locking structure.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

From /threads/thread.h

struct thread
{
  ...
  /* Supplemental Page Table */
  struct hash s_page_table;
  void *esp;

  struct list mmap_list;
  int next_mapid;
};

struct list mmap_list;
: a list of struct mmap_page to keep track of mmap pages in a process.

int next_mapid;
: the next mapid to use upon calling mmap

struct mmap_page
{
  int mapid;
  struct s_page_entry *p_entry;
  struct list_elem elem;
};

int mapid;
: the mapid allocated to the file corresponding to the mmap page.

struct s_page_entry *p_entry;
: the s_page_entry of the mmap page.

struct list_elem elem;
: list_elem for insertion into mmap_list in thread.h.


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files are kept in each thread’s mmap_list, similar to how each thread keeps track of its open files. When mmap system call occurs, mmap file is processed and its pages are added to the supplemental page table, and it is given a mapid. The mmap pages are kept separately for easy access when munmap is called, and fast access to only the mmap pages are required.

mmap files are mostly similar to executable files, in that they are read from file upon loading into physical memory. The differences during page fault and eviction is that for swap pages, when a page fault occurs, the contents are read from the swap disk into the physical memory. However, memory mapped pages are always read from the file. For eviction, dirty executable pages and swap pages are written to swap disk, while dirty mmap pages are written directly to the original file. On calling munmap or process exit, all dirty mmap pages are written to the mmap file as well.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When mmap is called, the file is added page by page into the supplemental page table. Before adding to the supplemental page table, page_lookup() is called on the address that the page should be stored. If it returns non-null value, that means that there is already a page present in that address and all mmap pages added previously are unmapped and mmap fails by returning -1.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

A lot of the implementation is shared between executable pages and mmap pages. 

mmap files are loaded just like the executable files as they both create pages by reading from a file. Thus in add_page(), the part where we create the s_page_entry is exactly the same except for the page type. Also, upon page fault, demand-paging from executables and mmap files share exactly the same code, load_file(). This is because demand-paging for the two pages both require reading from the file.

When the contents in the page are written back upon eviction, most of the implementation is shared too. When the evicted page is not dirty, there is no need to write the contents to the swap disk/original file. Therefore, the frame is freed and no changes to the s_page_entry is made. When the page is demanded again, the contents will be read from the files.

Since mmap and executable pages are very similar in nature, we decided to use the same implementation for both cases whenever possible, saving coding time and making it easier to understand.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

